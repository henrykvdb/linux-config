-- Bootstrap lazy
local lazypath = vim.fn.stdpath('data') .. '/lazy/lazy.nvim'
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system {
    'git',
    'clone',
    '--filter=blob:none',
    'https://github.com/folke/lazy.nvim.git',
    '--branch=stable', -- latest stable release
    lazypath,
  }
end
vim.opt.rtp:prepend(lazypath)

-------------
-- Plugins --
-------------

require('lazy').setup({
  -- Visual
  'rebelot/kanagawa.nvim',
  {
    'rebelot/kanagawa.nvim',
    config = function()
      vim.cmd("colorscheme kanagawa-wave")
    end,
  },

  -- General plugins
  'tpope/vim-sensible',

  -- Completion/snippets/LSP
  {
    'neovim/nvim-lspconfig',
    config = function()
      local lsp = require("lspconfig")
      local root_dir = require('lspconfig.util').root_pattern('.git', '.hg')

      lsp.clangd.setup({ on_attach = on_attach, capabilities = capabilities, root_dir = root_dir })
      lsp.pyright.setup({ on_attach = on_attach, capabilities = capabilities, root_dir = root_dir })
    end,
  },
  {
    'hrsh7th/nvim-cmp',
    dependencies = {
      --'hrsh7th/cmp-buffer',
      'hrsh7th/cmp-nvim-lsp',
      --'saadparwaiz1/cmp_luasnip',
      --'hrsh7th/cmp-path',
      --'hrsh7th/cmp-cmdline',
      'hrsh7th/cmp-nvim-lsp-signature-help',
    },
    config = function()
      local cmp = require 'cmp'
      --local luasnip = require 'luasnip'

      cmp.setup {
        snippet = {
          expand = function(args) luasnip.lsp_expand(args.body) end,
        },
        mapping = {
          ['<C-p>'] = { i = cmp.mapping.select_prev_item() },
          ['<C-n>'] = { i = cmp.mapping.select_next_item() },
          ['<C-y>'] = { i = cmp.mapping.complete() },

          ['<C-d>'] = { i = cmp.mapping.scroll_docs(-4) },
          ['<C-e>'] = { i = cmp.mapping.close() },
          ['<CR>'] = { i = cmp.mapping.confirm { behavior = cmp.ConfirmBehavior.Replace } },
          ['<C-k>'] = { i = cmp.mapping.confirm { behavior = cmp.ConfirmBehavior.Replace } },
        },
        sources = {
          { name = 'nvim_lsp' },
          { name = 'nvim_lsp_signature_help' },
          --{ name = 'buffer', keyword_length = 5 },
          --{ name = 'luasnip' },
          { name = 'path' },
        },
        --experimental = {
        --  native_menu = false,
        --  ghost_text = true,
        --},
      }

      cmp.setup.cmdline(':', {
        mapping = cmp.mapping.preset.cmdline {
          ['<C-p>'] = { c = cmp.mapping.select_prev_item() },
          ['<C-n>'] = { c = cmp.mapping.select_next_item() },
          ['<C-y>'] = { c = cmp.mapping.complete() },
        },
        sources = cmp.config.sources({
          { name = 'path' },
        }, {
          { name = 'cmdline', keyword_length = 4 },
        }),
      })
    end,
  },
  {
    'nvim-treesitter/nvim-treesitter',
    version = 'v0.9.1',
    config = function()
      require 'nvim-treesitter.highlight'

      require('nvim-treesitter.configs').setup {
        ensure_installed = {
          'python',
          'lua',
          'verilog',
          'json',
          'yaml',
          'bash',
          'dockerfile',
          'c',
          'cpp',
          'make',
          'regex',
          'markdown',
          'rst',
          'vim',
          'vimdoc',
          'query',
          'typescript',
          --'tcl',
          'proto',
          'matlab',
          'kotlin',
        },
        indent = {
          enable = false,
        },
        highlight = {
          enable = true,
          disable = { 'systemverilog', 'verilog' },
        },
        incremental_selection = {
          enable = true,
          keymaps = {
            init_selection = 'gnn',
            node_incremental = 'grn',
            scope_incremental = 'grc',
            node_decremental = 'grm',
          },
        },
        refactor = {
          highlight_definitions = { enable = true },
          smart_rename = { enable = true, keymaps = { smart_rename = 'gsr' } },
          navigation = {
            enable = true,
            keymaps = { goto_definition = 'gnd', list_definitions = 'gnD' },
          },
        },
        textobjects = {
          move = {
            enable = true,
            goto_next_start = { [']]'] = '@block.outer' },
            goto_previous_start = { ['[['] = '@block.outer' },
            goto_next_end = { [']['] = '@block.outer' },
            goto_previous_end = { ['[]'] = '@block.outer' },
          },
          swap = {
            enable = true,
            swap_next = {
              ['<A-n>'] = '@parameter.inner',
            },
            swap_previous = {
              ['<A-p>'] = '@parameter.inner',
            },
          },
          select = {
            enable = true,
            lookahead = true,
            keymaps = {
              ['af'] = '@function.outer',
              ['if'] = '@function.inner',
              ['ab'] = '@block.outer',
              ['ib'] = '@block.inner',
            },
          },
        },
      }
    end,
  },
  'nvim-treesitter/nvim-treesitter-refactor',
  'nvim-treesitter/nvim-treesitter-textobjects',


}, {
  
})